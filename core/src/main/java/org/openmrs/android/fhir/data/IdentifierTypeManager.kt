/*
* BSD 3-Clause License
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
* 1. Redistributions of source code must retain the above copyright notice, this
*    list of conditions and the following disclaimer.
*
* 2. Redistributions in binary form must reproduce the above copyright notice,
*    this list of conditions and the following disclaimer in the documentation
*    and/or other materials provided with the distribution.
*
* 3. Neither the name of the copyright holder nor the names of its
*    contributors may be used to endorse or promote products derived from
*    this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
package org.openmrs.android.fhir.data

import android.content.Context
import androidx.datastore.preferences.core.edit
import javax.inject.Inject
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.withContext
import org.openmrs.android.fhir.auth.dataStore
import org.openmrs.android.fhir.data.database.AppDatabase
import org.openmrs.android.fhir.data.database.model.IdentifierType
import org.openmrs.android.fhir.data.remote.ApiManager
import org.openmrs.android.fhir.data.remote.ApiResponse
import org.openmrs.android.fhir.data.remote.model.ResponseWrapper

class IdentifierTypeManager
@Inject
constructor(private val context: Context, val database: AppDatabase, val apiManager: ApiManager) {

  suspend fun fetchIdentifiers() {
    val newIdentifiers = fetchIdentifierFromEndpoint()
    if (newIdentifiers != null) {
      storeIdentifiers(newIdentifiers)
      selectRequiredIdentifiers(newIdentifiers)
    }
  }

  private suspend fun storeIdentifiers(identifierTypes: List<IdentifierType>) {
    withContext(Dispatchers.IO) { database.dao().insertAllIdentifierTypeModel(identifierTypes) }
  }

  private suspend fun selectRequiredIdentifiers(identifierTypes: List<IdentifierType>) {
    withContext(Dispatchers.IO) {
      val selectedIdentifierTypes =
        context.dataStore.data.first()[PreferenceKeys.SELECTED_IDENTIFIER_TYPES]?.toMutableSet()
          ?: mutableSetOf()
      val requiredIdentifierTypes = identifierTypes.filter { it.required }
      if (requiredIdentifierTypes.isNotEmpty()) {
        requiredIdentifierTypes.forEach { selectedIdentifierTypes.add(it.uuid) }
      }
      context.dataStore.edit { preferences ->
        preferences[PreferenceKeys.SELECTED_IDENTIFIER_TYPES] = selectedIdentifierTypes
      }
    }
  }

  suspend fun fetchIdentifierFromEndpoint(): List<IdentifierType>? {
    return withContext(Dispatchers.IO) {
      try {
        val response = apiManager.getAutogeneratedIdentifier()
        when (response) {
          is ApiResponse.Success<ResponseWrapper> -> {
            val identifierIdSet = mutableSetOf<String>()
            if (response.data?.results?.isEmpty() == true) return@withContext emptyList()

            val responseWrapper = response.data
            val resArray = mutableListOf<IdentifierType>()

            responseWrapper?.results?.forEach { identifierResponse ->
              val identifierType = identifierResponse.identifierType
              if (identifierType.uuid !in identifierIdSet) {
                identifierIdSet.add(identifierType.uuid)
                val sourceId =
                  if (identifierResponse.automaticGenerationEnabled) {
                    identifierResponse.source?.uuid.orEmpty()
                  } else {
                    ""
                  }
                resArray.add(
                  IdentifierType(
                    uuid = identifierType.uuid,
                    display = identifierType.display,
                    isAutoGenerated = identifierResponse.automaticGenerationEnabled,
                    required = identifierType.required,
                    sourceId = sourceId,
                  ),
                )
              }
            }
            return@withContext resArray
          }
          else -> null
        }
      } catch (e: Exception) {
        null
      }
    }
  }
}
